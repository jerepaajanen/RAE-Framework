//Font-size Mixin
// -------------------------------------------------------
// Use .font-size(x); for px to rem values and .font-size(x,true); 
// to activate Modular Scale based font sizing
// For Modular Scale, remember to set @modular-scale-factor

.font-size(@font-size-value, @use-modular-scale:false) when (@use-modular-scale = false){
	@rem-value: (@font-size-value / @base-font-size * 1rem);
	font-size: ~'@{rem-value}';
}
.font-size(@font-size-value, @use-modular-scale:false)  when (@use-modular-scale = true) {
	font-size: round((pow(@modular-scale-factor, @font-size-value) * 1rem), 3);
}


//
//Font-face Mixin used in style.less setup
// -------------------------------------------------------
.font-face (@fontname, @fontfile, @weight: normal, @style: normal, @svg: @fontname) {
	font-family: '@{fontname}';
	src: url('../fonts/@{fontfile}.eot'); /* IE9 Compat Modes */
	src: url('../fonts/@{fontfile}.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
    url('../fonts/@{fontfile}.woff') format('woff'), /* Pretty Modern Browsers; Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
    url('../fonts/@{fontfile}.ttf') format('truetype'), /* Safari, Android, iOS */
    url('../fonts/@{fontfile}.svg#@{svg}') format('svg'); /* Legacy iOS */
	font-weight: @weight;
	font-style: @style;
}

//
//Media Query Mixins
// -------------------------------------------------------

// Make sure that media queries don't overlap
@screen-xs-max:					(@screen-sm-min - 1);
@screen-sm-max:					(@screen-md-min - 1);
@screen-md-max:					(@screen-lg-min - 1);
@screen-lg-max:					(@screen-xl-min - 1);


// Orientation
@landscape:					~"(orientation:landscape)";
@potrait:					~"(orientation:portrait)";


// Small & Extra Small
@xsmall-only:		   		~"(max-width: @{screen-xs-max})";
@small-only:   				~"(max-width: @{screen-sm-max})";


// Medium
@medium-only:				~"(min-width: @{screen-md-min}) and (max-width: @{screen-md-max})";
@medium-up:					~"(min-width: @{screen-md-min})";

// Large
@large-only:  				~"(min-width: @{screen-lg-min}) and (max-width: @{screen-lg-max})";
@large-up:					~"(min-width: @{screen-lg-min})";

// Extra Large
@xlarge-only:   			~"(min-width: @{screen-xl-min})";
@xlarge-up:					~"(min-width: @{screen-xl-min})";


// Retina
@retina:					~"only screen and (-webkit-min-device-pixel-ratio: 2),only screen and (min--moz-device-pixel-ratio: 2),only screen and (-o-min-device-pixel-ratio: 2/1),only screen and (min-device-pixel-ratio: 2),only screen and (min-resolution: 192dpi),only screen and (min-resolution: 2dppx)";

//
// Retina images
// -------------------------------------------------------
// Short retina mixin for setting background-image and -size
// Example usage .retina-image("/img/bg-1x.png", "/img/bg-2x.png", 100px, 100px);

.img-retina(@file-1x, @file-2x, @width-1x, @height-1x) {
  background-image: url("@{file-1x}");
	@media @retina {
		background-image: url("@{file-2x}");
		background-size: @width-1x @height-1x;
	}
}

// -------------------------------------------------------
// Useful Mixins
// -------------------------------------------------------


// Button sizes
// -------------------------------------------------------
// .button-size(); Defaults to normal button size
.button-size(@height: @button-height; @padding-horizontal: @button-horizontal-padding; @font-size: @button-font-size; @border-width: @button-border-width; @border-radius: @button-border-radius;) {
	padding: 0 @padding-horizontal;
	font-size: @font-size;
	height: @height;
	line-height: (@height - (@border-width * 2));
	border: @button-border-width solid transparent;
	border-radius: @border-radius;
}

// CSS image replacement
// -------------------------------------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
.hide-text() {
	font: ~"0/0" a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

// Vertical align anything, even if you donâ€™t know elements height.
// Works only in CSS3 compatible browsers.
// -------------------------------------------------------
.vertical-align() {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);	
}

// Aspect Ratio
// -------------------------------------------------------
// Maintain Aspect Ratio of an Fluid Element. Specify .aspect-ratio to parent div.
// Add following values for child element: position: absolute; top: 0; left: 0; width:100%;

.aspect-ratio(@width, @height) {
	position: relative;
	height: 0;
	padding-bottom: (@height / @width * 100%);
	overflow: hidden;
}

// Placeholder text
// -------------------------------------------------------

.placeholder(@color: @placeholderText) {
	&:-moz-placeholder{ 
		color: @color; 
	} // Firefox 4-18
	&::-moz-placeholder {
		color: @color;
	} // Firefox 19+
	&:-ms-input-placeholder {
		color: @color;
	} // Internet Explorer 10+
	&::-webkit-input-placeholder {
		color: @color;
	} // Safari and Chrome
}


//
//Grid Mixins
// -------------------------------------------------------

.make-container() {
	padding-left:(@grid-gutter-width / 2);
	padding-right: (@grid-gutter-width / 2);
	margin-left: auto;
	margin-right: auto;
	&:extend(.clearfix all);
}
.make-row(@gutter: @grid-gutter-width) when (@gutter > 0) {	
	margin-left: (@gutter / -2);
	margin-right: (@gutter / -2);
	&:extend(.clearfix all);
}
.make-row(@gutter: @grid-gutter-width) when (@gutter = 0) {
    &:extend(.clearfix all);
}


// Column Mixins
// -------------------------------------------------------

.make-column(@gutter: @grid-gutter-width) when (@gutter > 0) {
	//position: relative;
	float: left;
	padding-left:(@gutter / 2);
	padding-right: (@gutter / 2);
}
.make-column(@gutter: @grid-gutter-width) when (@gutter = 0) {
	//position: relative;
	float: left;
}

.column(@column:@grid-columns) {
	width: percentage((@column / @grid-columns));
}

.offset(@offset:1) {
	margin-left: percentage((@offset / @grid-columns));
}

.push(@push:1) {
	left: percentage((@push / @grid-columns));
}

.pull(@pull:1) {
	left: percentage((@pull / @grid-columns * -1));
}

//
// Framework grid generation
// -------------------------------------------------------

.calc-grid(@index, @type, @class: ~'') when (@type = width) and (@index > 0) and (@use-columns = true){
	.col@{class}-@{index} {
		width: percentage((@index / @grid-columns));
	}
}
.calc-grid(@index, @type, @class: ~'') when (@type = push) and (@use-columns = true) and (@use-push = true)  {
	.push@{class}-@{index} {
		left: percentage((@index / @grid-columns));
	}
}
.calc-grid(@index, @type, @class: ~'') when (@type = pull) and (@use-columns = true) and (@use-pull = true) {
	.pull@{class}-@{index} {
		right: percentage((@index / @grid-columns));
	}
}
.calc-grid(@index, @type, @class: ~'') when (@type = offset) and (@use-columns = true) and (@use-offset = true) {
	.offset@{class}-@{index} {
		margin-left: percentage((@index / @grid-columns));
	}
}

// Basic looping in LESS
.make-grid(@index, @type, @class) when (@index >= 0) {
	.calc-grid(@index, @type, @class);
	// next iteration
	.make-grid(@index - 1, @type, @class);
}