//
// Grid Framework
// -------------------------------------------------------
// Calculate Grids
.calc-grid(@index, @type, @class: ~'') when (@type =width) and (@index > 0) {
	.u-width@{class}-@{index}of@{grid-columns} {
		width: percentage((@index / @grid-columns));
	}
}

// Loop Grid Variables
.loop-grid(@index, @type, @class: ~'') when (@index >=0) {
	.calc-grid(@index, @type, @class); // next iteration
	.loop-grid(@index - 1, @type, @class);
}


// Container Mixin
.make-container(@gutter: @container-padding-x) {
	display: flow-root;
	margin-left: auto;
	margin-right: auto;
	padding-left: @gutter;
	padding-right: @gutter;
}

// Grid Mixin
.make-grid(@gutter: @grid-gutter-width) {

	display: flex;
	flex-wrap: wrap;

	& when (@gutter > 0) {
		margin-left: ceil(@gutter / -2);
		margin-right: floor(@gutter / -2);
	}

	list-style: none; // Row can be used with list items
}

// Grid-column Mixin
.make-grid-column(@gutter: @grid-gutter-width) {
	& when (@gutter > 0) {
		padding-left: (@gutter / 2);
		padding-right: (@gutter / 2);
	}
}

// Width Mixin
.width(@column: @grid-columns) {
	& when (@column >=1) {
		width: percentage((@column / @grid-columns));
	}

	& when (@column < 1) {
		width: percentage((@column));
	}
}

// Offset Mixin
.offset(@offset: 1) {
	& when (@offset >=1) {
		margin-left: percentage((@offset / @grid-columns));
	}

	& when (@offset < 1) {
		margin-left: percentage((@offset));
	}
}
